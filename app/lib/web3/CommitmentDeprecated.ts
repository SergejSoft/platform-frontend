/* GENERATED BY TYPECHAIN VER. 0.1.4 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper,
} from "../contracts/typechain-runtime";

export class Commitment extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [{ name: "investor", type: "address" }],
        name: "whitelistTicket",
        outputs: [
          { name: "token", type: "uint8" },
          { name: "ticketEurUlps", type: "uint256" },
          { name: "", type: "uint256" },
        ],
        payable: false,
        type: "function",
      },
      {
        constant: true,
        inputs: [],
        name: "minTicketEur",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        type: "function",
      },
      {
        constant: true,
        inputs: [],
        name: "platformOperatorNeumarkRewardShare",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        type: "function",
      },
      { constant: false, inputs: [], name: "abort", outputs: [], payable: false, type: "function" },
      {
        constant: false,
        inputs: [],
        name: "handleTimedTransitions",
        outputs: [],
        payable: false,
        type: "function",
      },
      { constant: false, inputs: [], name: "commit", outputs: [], payable: true, type: "function" },
      {
        constant: true,
        inputs: [{ name: "atWhitelistPosition", type: "uint256" }],
        name: "whitelistInvestor",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        type: "function",
      },
      {
        constant: false,
        inputs: [
          { name: "newPolicy", type: "address" },
          { name: "newAccessController", type: "address" },
        ],
        name: "setAccessPolicy",
        outputs: [],
        payable: false,
        type: "function",
      },
      {
        constant: true,
        inputs: [{ name: "amount", type: "uint256" }],
        name: "estimateNeumarkReward",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        type: "function",
      },
      {
        constant: true,
        inputs: [],
        name: "ethEurFraction",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        type: "function",
      },
      {
        constant: true,
        inputs: [{ name: "signatory", type: "address" }],
        name: "agreementSignedAtBlock",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        type: "function",
      },
      {
        constant: true,
        inputs: [{ name: "amount", type: "uint256" }],
        name: "convertToEur",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        type: "function",
      },
      {
        constant: true,
        inputs: [],
        name: "euroLock",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        type: "function",
      },
      {
        constant: true,
        inputs: [{ name: "amendmentIndex", type: "uint256" }],
        name: "pastAgreement",
        outputs: [
          { name: "platformOperatorRepresentative", type: "address" },
          { name: "signedBlockTimestamp", type: "uint256" },
          { name: "agreementUri", type: "string" },
          { name: "index", type: "uint256" },
        ],
        payable: false,
        type: "function",
      },
      {
        constant: false,
        inputs: [
          { name: "investors", type: "address[]" },
          { name: "tokens", type: "uint8[]" },
          { name: "amounts", type: "uint256[]" },
        ],
        name: "addWhitelisted",
        outputs: [],
        payable: false,
        type: "function",
      },
      {
        constant: true,
        inputs: [],
        name: "platformWalletAddress",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        type: "function",
      },
      {
        constant: true,
        inputs: [{ name: "state", type: "uint8" }],
        name: "startOf",
        outputs: [{ name: "", type: "int256" }],
        payable: false,
        type: "function",
      },
      {
        constant: true,
        inputs: [],
        name: "state",
        outputs: [{ name: "", type: "uint8" }],
        payable: false,
        type: "function",
      },
      {
        constant: true,
        inputs: [],
        name: "maxCapEur",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        type: "function",
      },
      {
        constant: true,
        inputs: [],
        name: "currentAgreement",
        outputs: [
          { name: "platformOperatorRepresentative", type: "address" },
          { name: "signedBlockTimestamp", type: "uint256" },
          { name: "agreementUri", type: "string" },
          { name: "index", type: "uint256" },
        ],
        payable: false,
        type: "function",
      },
      {
        constant: true,
        inputs: [],
        name: "etherLock",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        type: "function",
      },
      {
        constant: false,
        inputs: [],
        name: "commitEuro",
        outputs: [],
        payable: false,
        type: "function",
      },
      {
        constant: true,
        inputs: [],
        name: "neumark",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        type: "function",
      },
      {
        constant: true,
        inputs: [],
        name: "ethereumForkArbiter",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        type: "function",
      },
      {
        constant: false,
        inputs: [{ name: "agreementUri", type: "string" }],
        name: "amendAgreement",
        outputs: [],
        payable: false,
        type: "function",
      },
      {
        constant: true,
        inputs: [],
        name: "accessPolicy",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        type: "function",
      },
      {
        constant: false,
        inputs: [{ name: "token", type: "address" }],
        name: "reclaim",
        outputs: [],
        payable: false,
        type: "function",
      },
      {
        inputs: [
          { name: "accessPolicy", type: "address" },
          { name: "forkArbiter", type: "address" },
          { name: "startDate", type: "int256" },
          { name: "platformWallet", type: "address" },
          { name: "neumark", type: "address" },
          { name: "etherToken", type: "address" },
          { name: "euroToken", type: "address" },
          { name: "etherLock", type: "address" },
          { name: "euroLock", type: "address" },
          { name: "capEurUlps", type: "uint256" },
          { name: "minTicketEurUlps", type: "uint256" },
          { name: "ethEurFraction", type: "uint256" },
        ],
        payable: false,
        type: "constructor",
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "investor", type: "address" },
          { indexed: true, name: "paymentToken", type: "address" },
          { indexed: false, name: "amount", type: "uint256" },
          { indexed: false, name: "eurEquivalent", type: "uint256" },
          { indexed: false, name: "grantedAmount", type: "uint256" },
          { indexed: false, name: "ofToken", type: "address" },
        ],
        name: "LogFundsCommitted",
        type: "event",
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "oldState", type: "uint8" },
          { indexed: false, name: "newState", type: "uint8" },
        ],
        name: "LogStateTransition",
        type: "event",
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "accepter", type: "address" }],
        name: "LogAgreementAccepted",
        type: "event",
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "platformOperatorRepresentative", type: "address" },
          { indexed: false, name: "agreementUri", type: "string" },
        ],
        name: "LogAgreementAmended",
        type: "event",
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "controller", type: "address" },
          { indexed: false, name: "oldPolicy", type: "address" },
          { indexed: false, name: "newPolicy", type: "address" },
        ],
        name: "LogAccessPolicyChanged",
        type: "event",
      },
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(web3: any, address: string | BigNumber): Promise<Commitment> {
    const contract = new Commitment(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);
    if (code === "0x0") {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get minTicketEur(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.minTicketEur, []);
  }
  public get platformOperatorNeumarkRewardShare(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.platformOperatorNeumarkRewardShare, []);
  }
  public get ethEurFraction(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.ethEurFraction, []);
  }
  public get euroLock(): Promise<string> {
    return promisify(this.rawWeb3Contract.euroLock, []);
  }
  public get platformWalletAddress(): Promise<string> {
    return promisify(this.rawWeb3Contract.platformWalletAddress, []);
  }
  public get state(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.state, []);
  }
  public get maxCapEur(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.maxCapEur, []);
  }
  public get etherLock(): Promise<string> {
    return promisify(this.rawWeb3Contract.etherLock, []);
  }
  public get neumark(): Promise<string> {
    return promisify(this.rawWeb3Contract.neumark, []);
  }
  public get ethereumForkArbiter(): Promise<string> {
    return promisify(this.rawWeb3Contract.ethereumForkArbiter, []);
  }
  public get accessPolicy(): Promise<string> {
    return promisify(this.rawWeb3Contract.accessPolicy, []);
  }
  public whitelistTicket(investor: BigNumber | string): Promise<[BigNumber, BigNumber, BigNumber]> {
    return promisify(this.rawWeb3Contract.whitelistTicket, [investor.toString()]);
  }
  public whitelistInvestor(atWhitelistPosition: BigNumber | number): Promise<string> {
    return promisify(this.rawWeb3Contract.whitelistInvestor, [atWhitelistPosition.toString()]);
  }
  public estimateNeumarkReward(amount: BigNumber | number): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.estimateNeumarkReward, [amount.toString()]);
  }
  public agreementSignedAtBlock(signatory: BigNumber | string): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.agreementSignedAtBlock, [signatory.toString()]);
  }
  public convertToEur(amount: BigNumber | number): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.convertToEur, [amount.toString()]);
  }
  public pastAgreement(
    amendmentIndex: BigNumber | number,
  ): Promise<[string, BigNumber, string, BigNumber]> {
    return promisify(this.rawWeb3Contract.pastAgreement, [amendmentIndex.toString()]);
  }
  public startOf(state: BigNumber | number): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.startOf, [state.toString()]);
  }
  public currentAgreement(): Promise<[string, BigNumber, string, BigNumber]> {
    return promisify(this.rawWeb3Contract.currentAgreement, []);
  }

  public abortTx(): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "abort", []);
  }
  public handleTimedTransitionsTx(): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "handleTimedTransitions", []);
  }
  public commitTx(): DeferredTransactionWrapper<IPayableTxParams> {
    return new DeferredTransactionWrapper<IPayableTxParams>(this, "commit", []);
  }
  public setAccessPolicyTx(
    newPolicy: BigNumber | string,
    newAccessController: BigNumber | string,
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "setAccessPolicy", [
      newPolicy.toString(),
      newAccessController.toString(),
    ]);
  }
  public addWhitelistedTx(
    investors: string[],
    tokens: BigNumber[],
    amounts: BigNumber[],
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "addWhitelisted", [
      investors.toString(),
      tokens.toString(),
      amounts.toString(),
    ]);
  }
  public commitEuroTx(): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "commitEuro", []);
  }
  public amendAgreementTx(agreementUri: string): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "amendAgreement", [
      agreementUri.toString(),
    ]);
  }
  public reclaimTx(token: BigNumber | string): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "reclaim", [token.toString()]);
  }
}
